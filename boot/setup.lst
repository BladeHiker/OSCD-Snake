     1                                  ;
     2                                  ; setup.s		(C) 1991 Linus Torvalds
     3                                  ;
     4                                  ; setup.s 负责从BIOS 中获取系统数据，并将这些数据放到系统内存的适当地方。
     5                                  ; 此时setup.s 和system 已经由bootsect 引导块加载到内存中。
     6                                  ; 
     7                                  ; 这段代码询问bios 有关内存/磁盘/其它参数，并将这些参数放到一个
     8                                  ;“安全的”地方：0x90000-0x901FF，也即原来bootsect 代码块曾经在
     9                                  ; 的地方，然后在被缓冲块覆盖掉之前由保护模式的system 读取。
    10                                  ;
    11                                  ; 注意：以下这些参数最好和bootsect.s 中的相同！
    12                                  INITSEG  equ 0x9000	
    13                                  SYSSEG   equ 0x1000	
    14                                  SETUPSEG equ 0x9020	
    15                                  
    16                                  start:
    17                                  ; BIOS 中断0x10 的读光标功能号 ah = 0x03
    18                                  ; 输入：bh = 页号
    19                                  ; 返回：ch = 扫描开始线，cl = 扫描结束线，
    20                                  ; dh = 行号(0x00 是顶端)，dl = 列号(0x00 是左边)。
    21 00000000 B80090                  	mov	ax,INITSEG		; 将ds 置成#INITSEG(0x9000)。这已经在bootsect 程序中设置过，但是现在是setup 程序，Linus 觉得需要再重新设置一下。
    22 00000003 8ED8                    	mov	ds,ax
    23 00000005 B403                    	mov	ah,0x03	
    24 00000007 30FF                    	xor	bh,bh
    25 00000009 CD10                    	int	0x10	
    26 0000000B 89160000                	mov	[0],dx			; 将光标位置信息存放在0x90000 处，控制台初始化时会来取。
    27                                  
    28                                  
    29                                  ; BIOS 中断0x15，功能号ah = 0x88
    30                                  ; 返回：ax = 从0x100000（1M）处开始的扩展内存大小(KB)。
    31                                  ; 若出错则CF 置位，ax = 出错码。
    32 0000000F B488                    	mov	ah,0x88
    33 00000011 CD15                    	int	0x15
    34 00000013 A30200                  	mov	[2],ax			; 将扩展内存数值存在0x90002 处（1 个字）
    35                                  
    36                                  
    37                                  ; 取显示卡当前显示模式
    38                                  ; 调用BIOS 中断0x10，功能号 ah = 0x0f
    39                                  ; 返回：ah = 字符列数，al = 显示模式，bh = 当前显示页。
    40 00000016 B40F                    	mov	ah,0x0f
    41 00000018 CD10                    	int	0x10
    42 0000001A 891E0400                	mov	[4],bx		; 0x90004(1 字)存放当前页
    43 0000001E A30600                  	mov	[6],ax		; 0x90006 显示模式,，0x90007 字符列数
    44                                  
    45                                  
    46                                  ; 检查显示方式（EGA/VGA）并取参数
    47                                  ; 调用BIOS 中断0x10
    48                                  ; 功能号：ah = 0x12，bl = 0x10
    49                                  ; 返回：bh = 显示状态
    50                                  ; (0x00 - 彩色模式，I/O 端口=0x3dX)
    51                                  ; (0x01 - 单色模式，I/O 端口=0x3bX)
    52                                  ; bl = 安装的显示内存
    53                                  ; (0x00 - 64k, 0x01 - 128k, 0x02 - 192k, 0x03 = 256k)
    54                                  ; cx = 显示卡特性参数
    55 00000021 B412                    	mov	ah,0x12
    56 00000023 B310                    	mov	bl,0x10
    57 00000025 CD10                    	int	0x10
    58 00000027 A30800                  	mov	[8],ax			; 0x90008 = ??
    59 0000002A 891E0A00                	mov	[10],bx			; 0x9000A = 安装的显示内存，0x9000B = 显示状态(彩色/单色)
    60 0000002E 890E0C00                	mov	[12],cx			; 0x9000C = 显示卡特性参数
    61                                  
    62                                  
    63                                  ; 取第一个硬盘的信息（复制硬盘参数表）
    64                                  ; 第1 个硬盘参数表的首地址竟然是中断向量0x41 的向量值！而第2 个硬盘
    65                                  ; 参数表紧接第1 个表的后面，中断向量0x46 的向量值也指向这第2 个硬盘
    66                                  ; 的参数表首址。表的长度是16 个字节(0x10)。
    67                                  ; 下面两段程序分别复制BIOS 有关两个硬盘的参数表，0x90080 处存放第1 个
    68                                  ; 硬盘的表，0x90090 处存放第2 个硬盘的表。
    69 00000032 B80000                  	mov	ax,0x0000
    70 00000035 8ED8                    	mov	ds,ax
    71 00000037 C5360401                	lds	si,[4*0x41]		; 取中断向量0x41 的值，也即hd0 参数表的地址->ds:si
    72 0000003B B80090                  	mov	ax,INITSEG
    73 0000003E 8EC0                    	mov	es,ax
    74 00000040 BF8000                  	mov	di,0x0080		; 传输的目的地址: 0x9000:0x0080 -> es:di
    75 00000043 B91000                  	mov	cx,0x10			; 共传输0x10 字节
    76 00000046 F3                      	rep
    77 00000047 A4                      	movsb
    78                                  ; 取得第二个硬盘的信息
    79 00000048 B80000                  	mov	ax,0x0000
    80 0000004B 8ED8                    	mov	ds,ax
    81 0000004D C5361801                	lds	si,[4*0x46]		; 取中断向量0x46 的值，也即hd1 参数表的地址->ds:si
    82 00000051 B80090                  	mov	ax,INITSEG
    83 00000054 8EC0                    	mov	es,ax
    84 00000056 BF9000                  	mov	di,0x0090
    85 00000059 B91000                  	mov	cx,0x10
    86 0000005C F3                      	rep
    87 0000005D A4                      	movsb
    88                                  
    89                                  
    90                                  ; 检查系统是否存在第2 个硬盘，如果不存在则第2 个表清零
    91                                  ; 利用BIOS 中断调用0x13 的取盘类型功能
    92                                  ; 功能号 ah = 0x15；
    93                                  ; 输入：dl = 驱动器号（0x8X 是硬盘：0x80 指第1 个硬盘，0x81 第2 个硬盘）
    94                                  ; 输出：ah = 类型码；00 --没有这个盘，CF 置位； 01 --是软驱，没有change-line 支持；
    95                                  ; 02 --是软驱(或其它可移动设备)，有change-line 支持； 03 --是硬盘。
    96 0000005E B80015                  	mov	ax,0x01500
    97 00000061 B281                    	mov	dl,0x81
    98 00000063 CD13                    	int	0x13
    99 00000065 0F820700                	jc	no_disk1
   100 00000069 80FC03                  	cmp	ah,3			; 是硬盘吗？（类型= 3 ？）
   101 0000006C 0F841000                	je	is_disk1
   102                                  no_disk1:
   103 00000070 B80090                  	mov	ax,INITSEG		; 第2 个硬盘不存在，则对第2 个硬盘表清零。
   104 00000073 8EC0                    	mov	es,ax
   105 00000075 BF9000                  	mov	di,0x0090
   106 00000078 B91000                  	mov	cx,0x10
   107 0000007B B80000                  	mov	ax,0x00
   108 0000007E F3                      	rep
   109 0000007F AA                      	stosb
   110                                  is_disk1:
   111                                  
   112                                  
   113                                  
   114                                  ; 从这里开始我们要进入保护模式了
   115                                  
   116 00000080 FA                      	cli			; 关中断
   117                                  
   118                                  ; 首先我们将system 模块移到正确的位置。
   119                                  ; bootsect 引导程序是将system 模块读入到从0x10000（64k）开始的位置。由于当时假设
   120                                  ; system 模块最大长度不会超过0x80000（512k），也即其末端不会超过内存地址0x90000，
   121                                  ; 所以bootsect 会将自己移动到0x90000 开始的地方，并把setup 加载到它的后面。
   122                                  ; 下面这段程序的用途是再把整个system 模块移动到0x00000 位置，即把从0x10000 到0x8ffff
   123                                  ; 的内存数据块(512k)，整块地向内存低端移动了0x10000（64k）的位置。
   124 00000081 B80000                  	mov	ax,0x0000
   125 00000084 FC                      	cld		
   126                                  do_move:
   127 00000085 8EC0                    	mov	es,ax		; es:di 是目的地址(初始为0x0000:0x0)
   128 00000087 050010                  	add	ax,0x1000	; 从0x1000 开始的64K开始移动
   129 0000008A 3D0090                  	cmp	ax,0x9000
   130 0000008D 0F840E00                	jz	end_move	; 已经把从0x8000 段开始的64k 代码移动完
   131 00000091 8ED8                    	mov	ds,ax		
   132 00000093 29FF                    	sub	di,di
   133 00000095 29F6                    	sub	si,si
   134 00000097 B90080                  	mov cx,0x8000	; 移动 64K 字节
   135 0000009A F3                      	rep
   136 0000009B A5                      	movsw
   137 0000009C E9E6FF                  	jmp	do_move
   138                                  
   139                                  ; 此后，我们加载段描述符
   140                                  ;
   141                                  ; 从这里开始会遇到32 位保护模式的操作，因此需要Intel 32 位保护模式编程方面的知识了,
   142                                  ; 有关这方面的信息请查阅列表后的简单介绍或附录中的详细说明。这里仅作概要说明。
   143                                  ;
   144                                  ; lidt 指令用于加载中断描述符表(idt)寄存器，它的操作数是6 个字节，0-1 字节是描述符表的
   145                                  ; 长度值(字节)；2-5 字节是描述符表的32 位线性基地址（首地址），其形式参见下面的说明。
   146                                  ; 中断描述符表中的每一个表项（8 字节）指出发生中断时
   147                                  ; 需要调用的代码的信息，与中断向量有些相似，但要包含更多的信息。
   148                                  ;
   149                                  ; lgdt 指令用于加载全局描述符表(gdt)寄存器，其操作数格式与lidt 指令的相同。全局描述符
   150                                  ; 表中的每个描述符项(8 字节)描述了保护模式下数据和代码段（块）的信息。其中包括段的
   151                                  ; 最大长度限制(16 位)、段的线性基址（32 位）、段的特权级、段是否在内存、读写许可以及
   152                                  ; 其它一些保护模式运行的标志.
   153                                  
   154                                  end_move:
   155 0000009F B82090                  	mov	ax,SETUPSEG	
   156 000000A2 8ED8                    	mov	ds,ax				; ds 指向本程序(setup)段
   157 000000A4 0F011E[3501]            	lidt	[idt_48]		; 加载中断描述符表(idt)寄存器，idt_48 是6 字节操作数的位置. 前2 字节表示idt 表的限长，后4 字节表示idt 表! 所处的基地址。
   158 000000A9 0F0116[3B01]            	lgdt	[gdt_48]		; 加载全局描述符表(gdt)寄存器，gdt_48 是6 字节操作数的位置
   159                                  
   160                                  
   161                                  ; 上面的操作完成后， 我们将开启A20 地址线
   162 000000AE E85F00                  	call	 empty_8042		; 等待输入缓冲器空, 只有当输入缓冲器为空时才可以对其进行写命令
   163 000000B1 B0D1                    	mov	al,0xD1				; 0xD1 命令码-表示要写数据到8042 的P2 端口。
   164 000000B3 E664                    	out	0x64,al				; P2 端口的位1 用于A20 线的选通。数据要写到0x60 口。
   165 000000B5 E85800                  	call 	empty_8042
   166 000000B8 B0DF                    	mov	al,0xDF				; 选通A20 地址线的参数
   167 000000BA E660                    	out	0x60,al
   168 000000BC E85100                  	call	empty_8042		; 输入缓冲器为空，则表示A20 线已经选通
   169                                  
   170                                  
   171                                  ; 如果上面一切正常， 现在我们必须重新对中断进行编程
   172                                  ; 我们将它们放在正好处于intel 保留的硬件中断后面，在int 0x20-0x2F。
   173                                  ; 在那里它们不会引起冲突。不幸的是IBM 在原PC 机中搞糟了，以后也没有纠正过来。
   174                                  ; PC 机的bios 将中断放在了0x08-0x0f，这些中断也被用于内部硬件中断。
   175                                  ; 所以我们就必须重新对8259 中断控制器进行编程。
   176 000000BF B011                    	mov	al,0x11		;  0x11 表示初始化命令开始，是ICW1 命令字，表示边沿触发、多片8259 级连、最后要发送ICW4 命令字
   177 000000C1 E620                    	out	0x20,al		
   178 000000C3 EB00EB00                	dw	0x00eb,0x00eb		; 是jmp $+2, jmp $+2的机器码。 这两条指令的主要作用是延时，可以延时（14 - 20）个时钟周期
   179                                  							; 而NOP 的时钟周期是3个，若要达到相同的效果，则须写（5-7）次.
   180 000000C7 E6A0                    	out	0xA0,al				; 再发送到8259A 从芯片
   181 000000C9 EB00EB00                	dw	0x00eb,0x00eb
   182 000000CD B020                    	mov	al,0x20	
   183 000000CF E621                    	out	0x21,al				; 送主芯片ICW2 命令字，起始中断号，要送奇地址
   184 000000D1 EB00EB00                	dw	0x00eb,0x00eb
   185 000000D5 B028                    	mov	al,0x28		
   186 000000D7 E6A1                    	out	0xA1,al				; 送从芯片ICW2 命令字，从芯片的起始中断号
   187 000000D9 EB00EB00                	dw	0x00eb,0x00eb
   188 000000DD B004                    	mov	al,0x04				; 送主芯片ICW3 命令字，主芯片的IR2 连从芯片INT
   189 000000DF E621                    	out	0x21,al
   190 000000E1 EB00EB00                	dw	0x00eb,0x00eb
   191 000000E5 B002                    	mov	al,0x02				
   192 000000E7 E6A1                    	out	0xA1,al				; 送从芯片ICW3 命令字，表示从芯片的INT 连到主芯! 片的IR2 引脚上
   193 000000E9 EB00EB00                	dw	0x00eb,0x00eb
   194 000000ED B001                    	mov	al,0x01		
   195 000000EF E621                    	out	0x21,al				; 送主芯片ICW4 命令字。8086 模式；普通EOI 方式，需发送指令来复位。初始化结束，芯片就绪。
   196 000000F1 EB00EB00                	dw	0x00eb,0x00eb
   197 000000F5 E6A1                    	out	0xA1,al
   198 000000F7 EB00EB00                	dw	0x00eb,0x00eb
   199 000000FB B0FF                    	mov	al,0xFF		
   200 000000FD E621                    	out	0x21,al				; 屏蔽主芯片所有中断请求
   201 000000FF EB00EB00                	dw	0x00eb,0x00eb
   202 00000103 E6A1                    	out	0xA1,al
   203                                  
   204                                  
   205                                  ; 这里设置进入32 位保护模式运行。首先加载机器状态字(lmsw - Load Machine Status Word)，也称
   206                                  ; 控制寄存器CR0，其比特位0 置1 将导致CPU 工作在保护模式。
   207 00000105 B80100                  	mov	ax,0x0001	; 保护模式比特位(PE)
   208 00000108 0F01F0                  	lmsw	ax		; 加载机器状态字
   209 0000010B EA00000800              	jmp	8:0			; 跳转至cs 段8，偏移0 处 
   210                                  ; 我们已经将system 模块移动到0x00000 开始的地方，所以这里的偏移地址是0。这里的段
   211                                  ; 值的8 已经是保护模式下的段选择符了，用于选择描述符表和描述符表项以及所要求的特权级。
   212                                  ; 段选择符长度为16 位（2 字节）；位0-1 表示请求的特权级0-3，linux 操作系统只
   213                                  ; 用到两级：0 级（系统级）和3 级（用户级）；位2 用于选择全局描述符表(0)还是局部描
   214                                  ; 述符表(1)；位3-15 是描述符表项的索引，指出选择第几项描述符。所以段选择符
   215                                  ; 8(0b0000,0000,0000,1000)表示请求特权级0、使用全局描述符表中的第1 项，该项指出
   216                                  ; 代码的基地址是0，因此这里的跳转指令就会去执行system 中的代码。
   217                                  
   218                                  
   219                                  
   220                                  ; 下面这个子程序检查键盘命令队列是否为空。这里不使用超时方法 - 如果这里死机，
   221                                  ; 则说明PC 机有问题，我们就没有办法再处理下去了。
   222                                  ; 只有当输入缓冲器为空时（状态寄存器位2 = 0）才可以对其进行写命令。
   223                                  empty_8042:
   224 00000110 EB00EB00                	dw	0x00eb,0x00eb		; 延时操作
   225 00000114 E464                    	in	al,0x64				; 读AT 键盘控制器状态寄存器
   226 00000116 A802                    	test	al,2			; 测试位2，输入缓冲器满？
   227 00000118 0F85F4FF                	jnz	empty_8042			
   228 0000011C C3                      	ret
   229                                    
   230                                  
   231                                  ; 全局描述符表开始处。描述符表由多个8 字节长的描述符项组成。这里给出了3 个描述符项。第1 项无用，但须存在。第2 项是系统代码段
   232                                  ; 描述符，第3 项是系统数据段描述符。每个描述符的具体含义参见列表后说明。
   233                                  gdt:
   234 0000011D 0000000000000000        	dw	0,0,0,0		; 第1 个描述符，不用
   235                                  ; 这里在gdt 表中的偏移量为0x08，当加载代码段寄存器(段选择符)时，使用的是这个偏移值。
   236 00000125 FF07                    	dw	0x07FF		; 8Mb - limit=2047 (2048*4096=8Mb)
   237 00000127 0000                    	dw	0x0000		; base address=0
   238 00000129 009A                    	dw	0x9A00		; 代码段为只读， 可执行
   239 0000012B C000                    	dw	0x00C0		; 颗粒度为 4096,32 位模式
   240                                  ; 这里在gdt 表中的偏移量是0x10，当加载数据段寄存器(如ds 等)时，使用的是这个偏移值。
   241                                  DATA_DESCRIPTOR:
   242 0000012D FF07                    	dw	0x07FF		; 8Mb - limit=2047 (2048*4096=8Mb)
   243 0000012F 0000                    	dw	0x0000		; base address=0
   244 00000131 0092                    	dw	0x9200		; 代码段为只读， 可执行
   245 00000133 C000                    	dw	0x00C0		; 颗粒度为 4096,32 位模式
   246                                  	
   247                                  ; 下面是加载中断描述符寄存器 idtr 的指令 lidt要求的6字节操作数。前2字节是gdt表的限长，
   248                                  ; 后4字节是idt 表的线性基地址。这里全局表长度设置为2KB（0x7ff即可），因为每8字节组成
   249                                  ; 一个段描述符项，所以表中共可以有256项。
   250                                  
   251                                  idt_48:
   252 00000135 0000                    	dw	0			; idt limit=0
   253 00000137 00000000                	dw	0,0			; idt base=0L
   254                                  
   255                                  gdt_48:
   256 0000013B 0008                    	dw	0x800		; gdt limit=2048, 256 GDT entries
   257 0000013D [1D03]0900              	dw	512+gdt,0x9	; gdt base = 0X9xxxx
